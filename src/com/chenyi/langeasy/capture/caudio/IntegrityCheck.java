package com.chenyi.langeasy.capture.caudio;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;

import com.chenyi.langeasy.capture.CaptureUtil;
import com.chenyi.langeasy.util.TikaUtil;

public class IntegrityCheck {

	public static void main(String[] args) throws FileNotFoundException, SQLException, IOException {
		Connection conn = CaptureUtil.getConnection();
		System.out.println("start time is : " + new Date());
		listCourse(conn);
		conn.close();
	}

	private static List<Map<String, String>> downloadLst;
	private static List<Map<String, String>> recordLst;
	private static int step = 30;

	private static void listCourse(Connection conn) throws SQLException, FileNotFoundException, IOException {
		String condition = "  AND c.courseid IN ('20141007205329100000009', '20150719142149100000094',"
				+ " '20120727135500100000002', '20120916163938100000068', '20150520115458100000114', "
				+ "'20120727135500100000009', '20150618142426100000125', '20140630151121100000012', '20150719142149100000095', '20141007205329100000010', '20150403105710100000009', '20120916154103100000043', '20120727135500100000179', '20150403105710100000010', '20150618142426100000128', '20120728210900100000517', '20150403105710100000012', '20150618142426100000130', '20121024060118100000342', '20150618142426100000131', '20150403105710100000013', '20150403105710100000015', '20150403105710100000016', '20130902145743100003342', '20121211151122100000217', '20141007205329100000013', '20141007205329100000014', '20130523154139100000894', '20130816165044100000183', '20141007205329100000015', '20141007205329100000016', '20160111165543100000025', '20150621180409100000049', '20150621180409100000054', '20130912174418100001002', '20130123205724100000983', '20131008161736100001637', '20150709104133100000029', '20150709104133100000031', '20150709104133100000032', '20150709104133100000035',"
				+ " '20160111165543100000027', '20150709104133100000037', '20130709111227100003693', "
				+ "'20131009102705100001974', '20150306151832100000001', '20150306151832100000004', "
				+ "'20150306151832100000007', '20140714115046100005233', '20150306151832100000009', "
				+ "'20150107003428100000001', '20150107003428100000003', '20151127131316100000002',"
				+ " '20150107003428100000004', '20130202091840100000251', '20150107003428100000005',"
				+ " '20150107003428100000008', '20150210092729100000057', '20140313234040100000004',"
				+ " '20130220095949100002097', '20131206180946100002220', '20160111165543100000028',"
				+ " '20130403001306100000449', '20131209152234100000065', '20131230141924100000008', "
				+ "'20140313234040100000005', '20130427230813100002238', '20150414080141100001102', '20150918104751100000014', '20130403214942100000721', '20160727094908100000003', '20130515221635100000517', '20151201122924100000218', '20130107193624100000424', '20140313234040100000011', '20150326161428100002086', '20130108084637100000507', '20130529090246100002037', '20160111165543100000029', '20150918153355100000006', '20150918153355100000007', '20130501094242100000706', '20160108154709100000026', '20130819104053100001032', '20150313153351100000011', '20160229092905100000164', '20150313153351100000014', '20141106095835100000108', '20141106095835100000109', '20150818145338100000040', '20150818145338100000043', '20150918153355100000011', '20150818145338100000045', '20150918153355100000014', '20150818145338100000047', '20150918153355100000016', '20150908171313100000024', '20150908171313100000025', '20150908171313100000026', '20141208181803100000033', '20150908171313100000027', '20150908171313100000028', '20141208181803100000034', '20130913164400100001467', '20130503172201100000221', '20150717165817100000026', '20150528112415100000006', '20150717165817100000028', '20160108161645100000028', '20150717165817100000029', '20150528112415100000007', '20150717182310100000033', '20141208181803100000037', '20150717182310100000035', '20141208181803100000038', '20141208181803100000039', '20150717182310100000036', '20150717182310100000037', '20150717182310100000039', '20130715151648100005424', '20141015110022100000016', '20141015110022100000017', '20141015110022100000019', '20150528112415100000010', '20121207104822100000127', '20150528112415100000011', '20141015110022100000022', '20130109094550100000681', '20150719142149100000093', '20141015110022100000023', '20150528122514100000014', '20141015110022100000024', '20150528122514100000015', '20150528122514100000017', '20150610100153100000066', '20150610100153100000069', '20150528122514100000022', '20130913164400100001477', '20150423075523100012184', '20130821194013100000222', '20150331080844100008422', '20150130082336100000005', '20150528172830100000069', '20150528174246100000074', '20130531130858100002668', '20150528174246100000076', '20130521173627100000349', '20150528174246100000086', '20141112113406100000159', '20130826120714100001060', '20150803134639100000056', '20160108161645100000030', '20150821102802100000001', '20150402162103100000001', '20150402162103100000002', '20150225172820100000039', '20150225172820100000041', '20150402162103100000004', '20150225172820100000045', '20150402162103100000006', '20150225172820100000046', '20150402162103100000007', '20150402162103100000008', '20130420084632100000308', '20150520115458100000101', '20150520115458100000103', '20130507005629100001135', '20150520115458100000104', '20141227233709100000008', '20150520115458100000106', '20141227233709100000011', '20141227233709100000016', '20140627101328100000135', '20160108161645100000032', '20140929122813100000011', '20140326222811100000013', '20160629114204100000791', '20140630121145100001107', '20140814111901100000039', '20160217110220100013050', '20160108161645100000035', '20140326222811100000014', '20130326101030100003581', '20160630093657100000114', '20140630151121100000002', '20140630151121100000003', '20140630151121100000004', '20140630151121100000006', '20140630151121100000008', '20160108161645100000037', '20150617164638100000082', '20150618142426100000123', '20160701101333100000044', '20130111115326100000287', '20130729142747100002786', '20130119083246100000095', '20130731093709100000070', '20130424090837100001478', '20160108161645100000038', '20130804130703100001484', '20130912114601100000906', '20160108161645100000043', '20130930151519100000429', '20131030180443100000524', '20140822081541100000026', '20160108161645100000044', '20130131112613100000041', '20160108161645100000045', '20130211193118100000723', '20160108161645100000047', '20160108161646100000049', '20140214143441100002985', '20160108164659100000054', '20160108164659100000055', '20140424205553100000604', '20160108164659100000056', '20140305163310100000912', '20160111165543100000014', '20140214143441100002993', '20160111165543100000019', '20140212210115100002300', '20140212210115100002303', '20160111165543100000020', '20160111165543100000022', '20160111165543100000024', '20140501214935100000017', '20140901170207100000065', '20140901170207100000066', '20140901170207100000068', '20140901170207100000069', '20140901170207100000073', '20140901170207100000074') ";
		String sql = "SELECT courseid, mp3path, min_duration FROM langeasy.course c WHERE c.courseid IN "
				+ "( SELECT s.courseid FROM langeasy.vocabulary_audio r "
				+ "INNER JOIN sentence s ON s.id = r.sentenceid GROUP BY s.courseid) " + condition + "limit 5000";
		System.out.println(sql);

		Statement st = conn.createStatement();
		ResultSet rs = st.executeQuery(sql);
		recordLst = new ArrayList<>();
		while (rs.next()) {
			Map<String, String> record = new HashMap<>();
			String courseid = rs.getString("courseid");
			String mp3path = rs.getString("mp3path");
			String minDuration = rs.getInt("min_duration") + "";
			record.put("courseid", courseid);
			record.put("mp3path", mp3path);
			record.put("minDuration", minDuration);
			recordLst.add(record);
		}
		rs.close();
		st.close();

		int total = recordLst.size();
		if (total > -1) {
			System.out.println(total);
			// return;
		}

		downloadLst = new ArrayList<Map<String, String>>();

		step = 10;
		IntegrityCheck jobManager = new IntegrityCheck();
		for (int i = 0; i < 24; i++) {
			Job job = jobManager.new Job(i);
			job.start();
		}

		for (int i = 0; i < 200; i++) {
			try {
				Thread.sleep(10000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			int dtotal = downloadLst.size();// about 1800
			System.out.println(dtotal);
			System.out.println(new JSONArray(downloadLst));
		}
	}

	class Job implements Runnable {
		private Thread t;
		private int jobIndex;

		Job(int jobIndex) {
			this.jobIndex = jobIndex;
			System.out.println("Creating job " + jobIndex);
		}

		public void run() {
			int start = jobIndex * step;
			int end = start + step;
			if (end > recordLst.size()) {
				end = recordLst.size();
			}
			List<Map<String, String>> subLst = recordLst.subList(start, end);
			int count = 0;
			for (Map<String, String> record : subLst) {
				String courseid = record.get("courseid");
				String mp3path = record.get("mp3path");
				String minDuration = record.get("minDuration");

				count++;
				System.err.println("job" + jobIndex + " check seq : " + count);
				String filepath = "e:/langeasy/" + mp3path;// "ListenData/1688236492/2089837271.mp3";
				String duration = TikaUtil.getDuration(filepath);

				int d1 = Integer.parseInt(minDuration);
				double d2 = 0;
				if (duration != null) {
					d1 = Integer.parseInt(minDuration);
					d2 = Double.parseDouble(duration);
				}
				if (duration == null || d1 > d2) {
					System.out.println(courseid + " duration: " + duration);
					System.out.println(courseid + " minDuration: " + minDuration);
					if (duration != null) {
						record.put("diff", (d1 - d2) + "");
					}
					record.put("duration", duration);
					downloadLst.add(record);
				}
			}
			System.out.println("job" + jobIndex + " last time is : " + new Date());
		}

		public void start() {
			System.out.println("Starting job " + jobIndex);
			if (t == null) {
				t = new Thread(this, "job" + jobIndex);
				t.start();
			}
		}

	}
}
